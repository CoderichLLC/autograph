TODO:
  * GraphQL API
    - I don't like resolver.auto()...
    - Resolver.graphql()? This requires executableSchema...
    - autograph.legacyMode (move to config)
    - Do you need schema on the context?
  * MongoClient
  * Schema.createNamedQuery - what to do?
  * Magic methods? $lookup?
  * Ability to trigger validation/finalize?
  * Schema.validate()? Do you need/want schema definitions for Directives and Enums?
  * CAN YOU USE STICH SCHEMA TO PIECEMEAL REFACTOR TO THIS NEW MODULE???

Known Issues:
  * MongoClient - not all queries go through $aggregateQuery and so you lose things like $project the result
  * query.flags.debug should not be at driver level
  * You only need to $addFields for mongo regex when it's not already a String (eg. Boolean)

Improvement Considerations:
  * Upsert???
  * EventEmitter
    - Debounce a function (debounce) to prevent excessive/redundant calls?
    - Memoize a function to prevent excessive/redundant calls?
  * Why do you send `${model}` in query instead of the actual model object?
  * Allow user-defined loaders (replacing .named?)
  * You need proper events on embedded documents so that "construct": "createdBy" would work!
  * config.dataSources to determine if supports
    - Joins
    - Transactions
    - Batches
    - Referential Integrity (no need to ensureId)
    - Composite index keys (probably need to move these tests elsewhere)
  * onDelete defer - could probably be done dynamically instead
  * DataLoader - rewrite for batch queries
  * EnsureId - inline query?
  * Allow @field(key: "some.path") in order to hoist

BREAKING CHANGELOG:
  * Revamped how transactions work
  * Revamped how initial setup works (config.js)
  * Revamped Pipeline { schema, context, resolver, query, model, field, value, path, startValue }
    - No more pipeline on database result! (check default, transform/normalize, deserialize)
    - Pipeline "toId" is now $id or $pk depending upon needs
    - Removed Pipelines [transform, deserialize, destruct, validate]
      - transform -> normalize
      - validate -> finalize
  * Revamped Emitter { schema, context, resolver, query { args, id, model, crud, key, doc, input, sort, result } }
    - "Basic" functions are hoisted to the top for execution; RETURNING a value will bypass thunk()
    - "Next" functions are run next, next() must ALWAYS be called; passing a value to next() will bypass thunk()
    - Event arguments refactored (no more merged! use query.input)
    - Getter to "changeset" on update
  * QueryBuilder.resolve() is now .auto()
  * Emitter.on('setup') now passed object: { schema }
  * No more gqlScope, dalScope, fieldScope (use crud + scope)

---------

* select('author.*') // populate/hydrate (left join)
* where('author.name') // join

---------

[
  '$default', [input] - Assign default value when undefined
  '$cast', [input, where] - Cast value to schema defined type
  '$normalize', [input] - Normalize the input
  '$instruct', [input, where] - Instruct value (will define attribute even if undefined)
  '$construct', [input] - On Create
  '$restruct', [input] - On Update
  '$serialize', [input, where] - transformations to db driver
  '$finalize', [input] - After preMutation Before postMutation (old validation step)
]
