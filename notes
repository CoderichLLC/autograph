* Resolver.toResultSet does not make any sense
* Push, Pull, Splice not fully correct (need to pass input through transforms before modification)
* Consider passing input to driver without merging doc (a lot of transformations happen) and then combining result in QueryResolver
* You only need to $addFields for mongo regex when it's not already a String (eg. Boolean)
* Need to consider if mutationMany really needs to be spread into individual mutationOnes
  - Validation performed on each doc post mutation
  - Audit trail per record
  - Inherit address currently implemented as cascade logic
* config.dataSources to determine if supports
  - Joins
  - Transactions
  - Batches

---------

* Deep resolve where clause vs joins...
* Transactions
* onDeletes
* Splice

---------

* Emitter
* DataLoader
* Batching

---------

* select('author.*') // populate/hydrate (left join)
* where('author.name') // join
* Things like "ensureId" are driver-specific? (eg. A SQL driver would have a FK relationship defined)

---------

// Rename key
// const $key = Object.entries(this.#model.keyMap || {}).reduce((p, [k, v]) => {
//   const regex = new RegExp(`((?:^|\\.))${k}\\b`, 'g');
//   return p.replace(regex, `$1${v}`);
// }, key);

// // Special array handling, ensure we understand the meaning
// if (Array.isArray(value)) {
//   const match = $key.match(/\$[a-zA-Z]{2}(?=']|$)/);
//   const $value = value.map(el => this.#normalize(el));
//   value = match ? $value : { [this.#arrayOp]: $value };
// }

findOne: [select, where]
findMany: [select, where]
count: [select, where]
updateOne: [select, where, input]
updateMany: [select, where, input]
upsertOne: [select, where, input]
upsertMany: [select, where, input]
deleteOne: [select, where]
deleteMany: [select, where]
