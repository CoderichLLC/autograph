TODO:
  * Upsert???
  * Emitter
    - event should have getters to interesting data?
    - setup?
    - validation?
  * Pipeline
    - arguments?
    - path, validation?
  * DataLoader
    - Batching
  * Connections (.resolve())?
  * GraphQL API (or is that another module?)

Known Issues:
  * mongodb dependency? AppService references ObjectId (use bson-objectid)
  * Get to the bottom of why you need a timeout when running transactions
  * You only need to $addFields for mongo regex when it's not already a String (eg. Boolean)
  * Tests unable to run because of mongo memory server setup

Improvement Considerations:
  * Why do you send `${model}` in query instead of the actual model object?
  * If no change in data, prevent entire operation?
  * Consider passing input to driver without merging doc (a lot of transformations happen) and then combining result in QueryResolver
  * Need to consider if mutationMany really needs to be spread into individual mutationOnes
    - Validation performed on each doc post mutation
    - Audit trail per record
    - Inherit address currently implemented as cascade logic
    - onDelete
  * config.dataSources to determine if supports
    - Joins
    - Transactions
    - Batches
    - Composite index keys (probably need to move these tests elsewhere)
  * onDelete defer - could probably be done dynamically instead

BREAKING CHANGELOG:
  * Revamped how transactions work
  * Revamped how initial setup works (config.js)

---------

* select('author.*') // populate/hydrate (left join)
* where('author.name') // join
* Things like "ensureId" are driver-specific? (eg. A SQL driver would have a FK relationship defined)

---------

// Rename key
// const $key = Object.entries(this.#model.keyMap || {}).reduce((p, [k, v]) => {
//   const regex = new RegExp(`((?:^|\\.))${k}\\b`, 'g');
//   return p.replace(regex, `$1${v}`);
// }, key);

// // Special array handling, ensure we understand the meaning
// if (Array.isArray(value)) {
//   const match = $key.match(/\$[a-zA-Z]{2}(?=']|$)/);
//   const $value = value.map(el => this.#normalize(el));
//   value = match ? $value : { [this.#arrayOp]: $value };
// }

findOne: [select, where]
findMany: [select, where]
count: [select, where]
updateOne: [select, where, input]
updateMany: [select, where, input]
upsertOne: [select, where, input]
upsertMany: [select, where, input]
deleteOne: [select, where]
deleteMany: [select, where]
